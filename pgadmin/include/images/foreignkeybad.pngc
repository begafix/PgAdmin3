#ifndef FOREIGNKEYBAD_PNG_H
#define FOREIGNKEYBAD_PNG_H

static const unsigned char foreignkeybad_png_data[] = {
0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 
0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 
0x08, 0x03, 0x00, 0x00, 0x00, 0x28, 0x2d, 0x0f, 
0x53, 0x00, 0x00, 0x01, 0x02, 0x50, 0x4c, 0x54, 
0x45, 0x00, 0x00, 0x00, 0xbc, 0xbc, 0xbc, 0x8f, 
0x8f, 0x8f, 0x90, 0x90, 0x90, 0xd1, 0xd0, 0xd1, 
0xf9, 0xf8, 0xf9, 0xf5, 0xf1, 0xf2, 0x85, 0x85, 
0x85, 0xb4, 0xb4, 0xb4, 0xd1, 0xca, 0xce, 0xd7, 
0x62, 0x62, 0xc5, 0x00, 0x00, 0xd0, 0x57, 0x59, 
0xb4, 0x95, 0xa1, 0xc5, 0x47, 0x4b, 0xdd, 0x69, 
0x69, 0xe1, 0xe1, 0xe1, 0xba, 0xb1, 0xb7, 0xca, 
0x51, 0x54, 0xf6, 0x77, 0x77, 0xc3, 0x47, 0x4b, 
0x9b, 0x86, 0x8f, 0xbd, 0x3d, 0x42, 0xf1, 0x57, 
0x57, 0xd5, 0xd5, 0xd5, 0xe0, 0xe0, 0xe0, 0x7c, 
0x74, 0x7a, 0xf6, 0x76, 0x76, 0xf6, 0x72, 0x72, 
0xf5, 0x6e, 0x6e, 0xbc, 0x3b, 0x40, 0xf1, 0x56, 
0x56, 0xef, 0x4f, 0x4f, 0xee, 0x48, 0x49, 0xdf, 
0xdf, 0xdf, 0x7a, 0x76, 0x79, 0xf5, 0x6d, 0x6d, 
0xf4, 0x68, 0x68, 0xf3, 0x62, 0x62, 0xf0, 0x55, 
0x55, 0xef, 0x4e, 0x4f, 0xee, 0x48, 0x48, 0xd3, 
0xd2, 0xd3, 0xd0, 0xc8, 0xcc, 0xf3, 0x61, 0x61, 
0xf1, 0x5b, 0x5b, 0xf0, 0x54, 0x54, 0xef, 0x4d, 
0x4e, 0xee, 0x47, 0x47, 0xb3, 0xb3, 0xb3, 0xd2, 
0xd2, 0xd2, 0xd0, 0xcf, 0xcf, 0xc3, 0xc2, 0xc3, 
0xda, 0x65, 0x65, 0xf0, 0x53, 0x54, 0xef, 0x4d, 
0x4d, 0xee, 0x46, 0x46, 0xaa, 0x2c, 0x33, 0x8e, 
0x8e, 0x8e, 0xb7, 0xb0, 0xb3, 0xd6, 0x62, 0x62, 
0xf0, 0x53, 0x53, 0xef, 0x4c, 0x4c, 0xee, 0x45, 
0x45, 0xec, 0x3e, 0x3f, 0xeb, 0x38, 0x38, 0xbb, 
0x43, 0x45, 0xf0, 0x52, 0x52, 0xef, 0x4b, 0x4b, 
0xed, 0x44, 0x45, 0xeb, 0x37, 0x37, 0xea, 0x31, 
0x31, 0xe9, 0x2b, 0x2b, 0xf0, 0x51, 0x51, 0xee, 
0x4a, 0x4a, 0xed, 0x43, 0x44, 0x99, 0x43, 0x4a, 
0xe9, 0x2a, 0x2b, 0xe8, 0x25, 0x25, 0xe7, 0x20, 
0x20, 0xed, 0x42, 0x43, 0xc4, 0x46, 0x4a, 0x67, 
0x83, 0x92, 0x99, 0x44, 0x4b, 0xe7, 0x1f, 0x20, 
0x83, 0x6c, 0x7c, 0xef, 0x86, 0x87, 0x1f, 0x00, 
0x00, 0x00, 0x01, 0x74, 0x52, 0x4e, 0x53, 0x00, 
0x40, 0xe6, 0xd8, 0x66, 0x00, 0x00, 0x00, 0x09, 
0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x00, 0x48, 
0x00, 0x00, 0x00, 0x48, 0x00, 0x46, 0xc9, 0x6b, 
0x3e, 0x00, 0x00, 0x00, 0x9f, 0x49, 0x44, 0x41, 
0x54, 0x18, 0xd3, 0xad, 0x8d, 0xe5, 0x12, 0x82, 
0x50, 0x14, 0x84, 0x2f, 0x88, 0x82, 0xac, 0x89, 
0xdd, 0x8a, 0xdd, 0x1d, 0xd8, 0xdd, 0x1d, 0xef, 
0xff, 0x2a, 0x72, 0x45, 0xc6, 0x17, 0x70, 0x7f, 
0x9c, 0x99, 0xfd, 0xce, 0xce, 0x2e, 0x21, 0x7f, 
0x11, 0xc3, 0x1a, 0x38, 0xa3, 0xe9, 0xe7, 0x79, 
0x81, 0x33, 0x8b, 0xb0, 0x10, 0x62, 0xb5, 0xc1, 
0x4e, 0xff, 0x82, 0xc3, 0x29, 0xc1, 0x05, 0xb7, 
0xc7, 0x0b, 0x1f, 0x25, 0xac, 0x3f, 0x10, 0x44, 
0x28, 0x1c, 0x41, 0x14, 0xb1, 0x78, 0x02, 0x14, 
0xc8, 0x49, 0x09, 0xa9, 0x74, 0x06, 0xd9, 0x5c, 
0x9e, 0x26, 0x18, 0x41, 0x2e, 0x14, 0x45, 0x94, 
0xca, 0x95, 0x6a, 0xed, 0xd3, 0x41, 0xf8, 0x7a, 
0xa3, 0xd9, 0x6a, 0xa3, 0xd3, 0xed, 0x41, 0xf9, 
0xce, 0xf6, 0x07, 0x43, 0x8c, 0xc6, 0x93, 0xe9, 
0x4c, 0x4b, 0xa8, 0x9a, 0x63, 0xb1, 0x5c, 0x61, 
0xbd, 0xd9, 0xea, 0x04, 0xbb, 0xfd, 0x01, 0x47, 
0x9c, 0xce, 0x17, 0x68, 0x40, 0xc2, 0x15, 0xb7, 
0xfb, 0x03, 0x4f, 0x3d, 0xf1, 0x52, 0x68, 0x9f, 
0x7a, 0x55, 0xff, 0x06, 0x83, 0xde, 0x11, 0x90, 
0x83, 0x8e, 0xca, 0x44, 0x00, 0x00, 0x00, 0x25, 
0x74, 0x45, 0x58, 0x74, 0x64, 0x61, 0x74, 0x65, 
0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x00, 
0x32, 0x30, 0x31, 0x31, 0x2d, 0x30, 0x33, 0x2d, 
0x30, 0x38, 0x54, 0x31, 0x32, 0x3a, 0x31, 0x37, 
0x3a, 0x30, 0x39, 0x2b, 0x30, 0x36, 0x3a, 0x30, 
0x30, 0xd3, 0xe6, 0xa8, 0x62, 0x00, 0x00, 0x00, 
0x25, 0x74, 0x45, 0x58, 0x74, 0x64, 0x61, 0x74, 
0x65, 0x3a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 
0x00, 0x32, 0x30, 0x31, 0x31, 0x2d, 0x30, 0x33, 
0x2d, 0x30, 0x38, 0x54, 0x31, 0x32, 0x3a, 0x31, 
0x37, 0x3a, 0x30, 0x39, 0x2b, 0x30, 0x36, 0x3a, 
0x30, 0x30, 0xa2, 0xbb, 0x10, 0xde, 0x00, 0x00, 
0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 
0x60, 0x82, 
};

#include "wx/mstream.h"

static wxImage *foreignkeybad_png_img()
{
	if (!wxImage::FindHandler(wxT("PNG file")))
		wxImage::AddHandler(new wxPNGHandler());
	static wxImage *img_foreignkeybad_png = new wxImage();
	if (!img_foreignkeybad_png || !img_foreignkeybad_png->IsOk())
	{
		wxMemoryInputStream img_foreignkeybad_pngIS(foreignkeybad_png_data, sizeof(foreignkeybad_png_data));
		img_foreignkeybad_png->LoadFile(img_foreignkeybad_pngIS, wxBITMAP_TYPE_PNG);
	}
	return img_foreignkeybad_png;
}
#define foreignkeybad_png_img foreignkeybad_png_img()

static wxBitmap *foreignkeybad_png_bmp()
{
	static wxBitmap *bmp_foreignkeybad_png;
	if (!bmp_foreignkeybad_png || !bmp_foreignkeybad_png->IsOk())
		bmp_foreignkeybad_png = new wxBitmap(*foreignkeybad_png_img);
	return bmp_foreignkeybad_png;
}
#define foreignkeybad_png_bmp foreignkeybad_png_bmp()

static wxIcon *foreignkeybad_png_ico()
{
	static wxIcon *ico_foreignkeybad_png;
	if (!ico_foreignkeybad_png || !ico_foreignkeybad_png->IsOk())
	{
		ico_foreignkeybad_png = new wxIcon();
		ico_foreignkeybad_png->CopyFromBitmap(*foreignkeybad_png_bmp);
	}
	return ico_foreignkeybad_png;
}
#define foreignkeybad_png_ico foreignkeybad_png_ico()

#endif // FOREIGNKEYBAD_PNG_H
