#ifndef CHECKBAD_PNG_H
#define CHECKBAD_PNG_H

static const unsigned char checkbad_png_data[] = {
0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 
0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 
0x08, 0x03, 0x00, 0x00, 0x00, 0x28, 0x2d, 0x0f, 
0x53, 0x00, 0x00, 0x00, 0x01, 0x73, 0x52, 0x47, 
0x42, 0x00, 0xae, 0xce, 0x1c, 0xe9, 0x00, 0x00, 
0x01, 0x20, 0x50, 0x4c, 0x54, 0x45, 0x70, 0x92, 
0x16, 0xc5, 0x00, 0x00, 0xaa, 0x2c, 0x33, 0xe7, 
0x1f, 0x20, 0xe7, 0x20, 0x20, 0xe8, 0x25, 0x25, 
0xe9, 0x2a, 0x2b, 0xe9, 0x2b, 0x2b, 0x99, 0x43, 
0x4a, 0x99, 0x44, 0x4b, 0xbc, 0x3b, 0x40, 0xea, 
0x31, 0x31, 0xbe, 0x3d, 0x42, 0xba, 0x44, 0x46, 
0xeb, 0x37, 0x37, 0xeb, 0x38, 0x38, 0xc4, 0x46, 
0x4a, 0xc4, 0x47, 0x4b, 0xc5, 0x47, 0x4b, 0xec, 
0x3e, 0x3f, 0xed, 0x42, 0x43, 0xed, 0x43, 0x44, 
0xed, 0x44, 0x45, 0xee, 0x45, 0x45, 0xee, 0x46, 
0x46, 0xee, 0x47, 0x47, 0xca, 0x51, 0x54, 0xee, 
0x48, 0x48, 0xee, 0x48, 0x49, 0xee, 0x4a, 0x4a, 
0xef, 0x4b, 0x4b, 0xef, 0x4c, 0x4c, 0xef, 0x4d, 
0x4d, 0xef, 0x4d, 0x4e, 0xef, 0x4e, 0x4f, 0xd0, 
0x57, 0x59, 0xef, 0x4f, 0x4f, 0xc5, 0x5b, 0x5d, 
0xf0, 0x51, 0x51, 0xf0, 0x52, 0x52, 0xf0, 0x53, 
0x53, 0xf0, 0x53, 0x54, 0xf0, 0x54, 0x54, 0xf0, 
0x55, 0x55, 0xf1, 0x56, 0x56, 0xf1, 0x57, 0x57, 
0xd6, 0x62, 0x62, 0xd7, 0x62, 0x62, 0xf1, 0x5b, 
0x5b, 0xda, 0x65, 0x65, 0xf3, 0x61, 0x61, 0xf3, 
0x62, 0x62, 0xdd, 0x69, 0x69, 0x71, 0x93, 0x17, 
0xf4, 0x68, 0x68, 0xf5, 0x6d, 0x6d, 0xf5, 0x6e, 
0x6e, 0xf6, 0x72, 0x72, 0x7c, 0xa0, 0x23, 0xf6, 
0x76, 0x76, 0xf6, 0x77, 0x77, 0x7f, 0xa3, 0x27, 
0x80, 0xa3, 0x27, 0x82, 0xa8, 0x2a, 0x87, 0xac, 
0x2f, 0x87, 0xad, 0x2f, 0x8a, 0xb2, 0x31, 0x8f, 
0xb6, 0x37, 0x95, 0xbc, 0x3f, 0xa5, 0xb9, 0x6e, 
0xa7, 0xbb, 0x72, 0x9d, 0xc5, 0x47, 0x9c, 0xc7, 
0x45, 0x9e, 0xc7, 0x49, 0xaf, 0xc1, 0x7e, 0xa2, 
0xca, 0x4e, 0xb0, 0xc1, 0x7f, 0xa4, 0xcd, 0x4e, 
0xb3, 0xc4, 0x85, 0xa3, 0xcf, 0x4c, 0xac, 0xd7, 
0x58, 0xac, 0xd8, 0x57, 0xb1, 0xdd, 0x5d, 0xb1, 
0xde, 0x5c, 0xc5, 0xd2, 0xa1, 0xc7, 0xd3, 0xa4, 
0xb5, 0xe3, 0x62, 0xcc, 0xd7, 0xad, 0xce, 0xd9, 
0xb1, 0xd5, 0xde, 0xbc, 0xc3, 0xf1, 0x70, 0xc4, 
0xf1, 0x71, 0xc4, 0xf1, 0x72, 0xdc, 0xe4, 0xc7, 
0xc6, 0xf3, 0x74, 0xcb, 0xfa, 0x79, 0x42, 0xa9, 
0xe3, 0x49, 0x00, 0x00, 0x00, 0x01, 0x74, 0x52, 
0x4e, 0x53, 0x00, 0x40, 0xe6, 0xd8, 0x66, 0x00, 
0x00, 0x00, 0x01, 0x62, 0x4b, 0x47, 0x44, 0x00, 
0x88, 0x05, 0x1d, 0x48, 0x00, 0x00, 0x00, 0x09, 
0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0b, 0x13, 
0x00, 0x00, 0x0b, 0x13, 0x01, 0x00, 0x9a, 0x9c, 
0x18, 0x00, 0x00, 0x00, 0x07, 0x74, 0x49, 0x4d, 
0x45, 0x07, 0xdb, 0x07, 0x19, 0x0f, 0x21, 0x26, 
0x7e, 0xd2, 0x55, 0x6a, 0x00, 0x00, 0x00, 0x8f, 
0x49, 0x44, 0x41, 0x54, 0x18, 0xd3, 0xa5, 0x8c, 
0xc7, 0x0a, 0xc2, 0x50, 0x00, 0x04, 0xdf, 0xc4, 
0xde, 0x7b, 0x8b, 0x25, 0xf6, 0xae, 0xb1, 0x17, 
0x14, 0x04, 0x45, 0xf4, 0x10, 0x0f, 0x82, 0xf5, 
0xff, 0x7f, 0x44, 0x4d, 0x4c, 0xf0, 0xee, 0xde, 
0x66, 0xd8, 0x5d, 0x21, 0xfe, 0xca, 0x65, 0xaf, 
0xfd, 0xe2, 0x73, 0xba, 0x3b, 0x1d, 0x4c, 0xa3, 
0x52, 0xb9, 0x6e, 0xce, 0x51, 0x26, 0x3a, 0xdd, 
0xb5, 0x1a, 0x6b, 0x22, 0x37, 0x3f, 0x3d, 0xc3, 
0x6c, 0x8f, 0xac, 0x96, 0x0b, 0xbc, 0x74, 0xab, 
0x39, 0x8c, 0x86, 0xcc, 0x7c, 0x36, 0xa6, 0x53, 
0xce, 0x7e, 0x37, 0xe2, 0xa1, 0x32, 0x1a, 0xb4, 
0x4b, 0x19, 0x93, 0xdf, 0x19, 0xd2, 0x2a, 0xa6, 
0x91, 0x2c, 0xee, 0xd3, 0x54, 0x52, 0xb1, 0x90, 
0xd5, 0x08, 0xd0, 0x28, 0x24, 0x09, 0xfa, 0x5c, 
0xa6, 0xa1, 0x9e, 0x4f, 0xe0, 0xc6, 0xe9, 0xb0, 
0x63, 0x08, 0x99, 0x38, 0x61, 0xe1, 0xc1, 0x66, 
0x6d, 0x24, 0xfd, 0x4f, 0xfa, 0xf0, 0x0b, 0x95, 
0x10, 0x0e, 0x8b, 0xa4, 0x2d, 0xc8, 0x80, 0x00, 
0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 
0x42, 0x60, 0x82, 
};

#include "wx/mstream.h"

static wxImage *checkbad_png_img()
{
	if (!wxImage::FindHandler(wxT("PNG file")))
		wxImage::AddHandler(new wxPNGHandler());
	static wxImage *img_checkbad_png = new wxImage();
	if (!img_checkbad_png || !img_checkbad_png->IsOk())
	{
		wxMemoryInputStream img_checkbad_pngIS(checkbad_png_data, sizeof(checkbad_png_data));
		img_checkbad_png->LoadFile(img_checkbad_pngIS, wxBITMAP_TYPE_PNG);
	}
	return img_checkbad_png;
}
#define checkbad_png_img checkbad_png_img()

static wxBitmap *checkbad_png_bmp()
{
	static wxBitmap *bmp_checkbad_png;
	if (!bmp_checkbad_png || !bmp_checkbad_png->IsOk())
		bmp_checkbad_png = new wxBitmap(*checkbad_png_img);
	return bmp_checkbad_png;
}
#define checkbad_png_bmp checkbad_png_bmp()

static wxIcon *checkbad_png_ico()
{
	static wxIcon *ico_checkbad_png;
	if (!ico_checkbad_png || !ico_checkbad_png->IsOk())
	{
		ico_checkbad_png = new wxIcon();
		ico_checkbad_png->CopyFromBitmap(*checkbad_png_bmp);
	}
	return ico_checkbad_png;
}
#define checkbad_png_ico checkbad_png_ico()

#endif // CHECKBAD_PNG_H
