#ifndef TRIGGERBAD_PNG_H
#define TRIGGERBAD_PNG_H

static const unsigned char triggerbad_png_data[] = {
0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 
0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 
0x08, 0x03, 0x00, 0x00, 0x00, 0x28, 0x2d, 0x0f, 
0x53, 0x00, 0x00, 0x00, 0xf9, 0x50, 0x4c, 0x54, 
0x45, 0x00, 0x00, 0x00, 0x85, 0xbe, 0xc9, 0x2f, 
0x91, 0xa3, 0x74, 0xf2, 0xe2, 0xca, 0xff, 0xf8, 
0xfd, 0xff, 0xff, 0xf7, 0xf8, 0xf8, 0xfa, 0xfa, 
0xfb, 0xf8, 0xf7, 0xf8, 0xfc, 0xfe, 0xfe, 0xca, 
0xea, 0xe7, 0xd7, 0x62, 0x62, 0xc5, 0x00, 0x00, 
0xd0, 0x57, 0x59, 0xc4, 0xc4, 0xc8, 0xc6, 0xfd, 
0xf6, 0x93, 0x94, 0xa1, 0xc5, 0x47, 0x4b, 0xdd, 
0x69, 0x69, 0x43, 0x87, 0x99, 0xc5, 0x5b, 0x5d, 
0xf6, 0x77, 0x77, 0xc4, 0x47, 0x4b, 0xa5, 0xa9, 
0xb0, 0xbe, 0x3d, 0x42, 0xf1, 0x57, 0x57, 0x58, 
0x7e, 0x8f, 0xf6, 0x76, 0x76, 0xf6, 0x72, 0x72, 
0xf5, 0x6e, 0x6e, 0xbc, 0x3b, 0x40, 0xf1, 0x56, 
0x56, 0xef, 0x4f, 0x4f, 0xee, 0x48, 0x49, 0x5e, 
0x7b, 0x8c, 0xca, 0x51, 0x54, 0xf5, 0x6d, 0x6d, 
0xf4, 0x68, 0x68, 0xf3, 0x62, 0x62, 0xf0, 0x55, 
0x55, 0xef, 0x4e, 0x4f, 0xee, 0x48, 0x48, 0x38, 
0x8c, 0x9e, 0x98, 0xbe, 0xbc, 0xf3, 0x61, 0x61, 
0xf1, 0x5b, 0x5b, 0xf0, 0x54, 0x54, 0xef, 0x4d, 
0x4e, 0xee, 0x47, 0x47, 0x36, 0xaf, 0xa0, 0xa3, 
0xc0, 0xbd, 0xda, 0x65, 0x65, 0xf0, 0x53, 0x54, 
0xef, 0x4d, 0x4d, 0xee, 0x46, 0x46, 0xaa, 0x2c, 
0x33, 0x8f, 0xc2, 0xbe, 0xd6, 0x62, 0x62, 0xf0, 
0x53, 0x53, 0xef, 0x4c, 0x4c, 0xee, 0x45, 0x45, 
0xec, 0x3e, 0x3f, 0xeb, 0x38, 0x38, 0x4d, 0x83, 
0x94, 0xba, 0x44, 0x46, 0xf0, 0x52, 0x52, 0xef, 
0x4b, 0x4b, 0xed, 0x44, 0x45, 0xeb, 0x37, 0x37, 
0xea, 0x31, 0x31, 0xe9, 0x2b, 0x2b, 0x83, 0x6c, 
0x7c, 0xf0, 0x51, 0x51, 0xee, 0x4a, 0x4a, 0xed, 
0x43, 0x44, 0x99, 0x43, 0x4a, 0xe9, 0x2a, 0x2b, 
0xe8, 0x25, 0x25, 0xe7, 0x20, 0x20, 0xed, 0x42, 
0x43, 0xc4, 0x46, 0x4a, 0x99, 0x44, 0x4b, 0xe7, 
0x1f, 0x20, 0xaf, 0xf9, 0x42, 0x9f, 0x00, 0x00, 
0x00, 0x01, 0x74, 0x52, 0x4e, 0x53, 0x00, 0x40, 
0xe6, 0xd8, 0x66, 0x00, 0x00, 0x00, 0x09, 0x70, 
0x48, 0x59, 0x73, 0x00, 0x00, 0x00, 0x48, 0x00, 
0x00, 0x00, 0x48, 0x00, 0x46, 0xc9, 0x6b, 0x3e, 
0x00, 0x00, 0x00, 0xa0, 0x49, 0x44, 0x41, 0x54, 
0x18, 0xd3, 0x6d, 0xcd, 0xd5, 0x0e, 0xc2, 0x60, 
0x0c, 0x05, 0xe0, 0x7f, 0x1d, 0xbe, 0x83, 0xbb, 
0xcb, 0x70, 0xf7, 0xe1, 0x0e, 0xc3, 0xed, 0xfd, 
0x1f, 0x86, 0x01, 0x5b, 0x32, 0x12, 0x7a, 0xd1, 
0xa4, 0x5f, 0xda, 0x1e, 0xc6, 0xfe, 0x14, 0x47, 
0x44, 0x9c, 0x1e, 0x88, 0xe7, 0x79, 0xfa, 0x01, 
0x83, 0x52, 0x7a, 0x21, 0xa3, 0xc9, 0x6c, 0xb1, 
0xea, 0x84, 0x6c, 0x02, 0xec, 0x0e, 0xa7, 0xcb, 
0x0d, 0xcf, 0x17, 0xbc, 0x3e, 0xf8, 0x11, 0x08, 
0x86, 0x10, 0x56, 0x25, 0x82, 0x68, 0x2c, 0x8e, 
0x04, 0x92, 0xa9, 0x34, 0x3e, 0x90, 0x11, 0x91, 
0xcd, 0xe5, 0x51, 0x28, 0x96, 0xd4, 0x8d, 0x72, 
0x45, 0x40, 0xb5, 0x56, 0x6f, 0x34, 0xb5, 0x1f, 
0xd4, 0x6a, 0x77, 0xd0, 0xed, 0xf5, 0x21, 0x69, 
0x29, 0x83, 0x21, 0x46, 0xe3, 0xc9, 0x74, 0xa6, 
0x6d, 0xcc, 0x17, 0x58, 0xae, 0xd6, 0xd8, 0x6c, 
0x77, 0xaa, 0xc8, 0xd8, 0x1f, 0x8e, 0x38, 0xe1, 
0x7c, 0xb9, 0x7e, 0x53, 0x64, 0x11, 0x37, 0xdc, 
0xd9, 0x03, 0x4f, 0xed, 0x86, 0x49, 0x90, 0xe4, 
0x77, 0x57, 0xe6, 0x17, 0x59, 0x1e, 0x10, 0xc8, 
0x4e, 0x56, 0xd8, 0x80, 0x00, 0x00, 0x00, 0x25, 
0x74, 0x45, 0x58, 0x74, 0x64, 0x61, 0x74, 0x65, 
0x3a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x00, 
0x32, 0x30, 0x31, 0x31, 0x2d, 0x30, 0x33, 0x2d, 
0x30, 0x38, 0x54, 0x31, 0x32, 0x3a, 0x31, 0x37, 
0x3a, 0x30, 0x39, 0x2b, 0x30, 0x36, 0x3a, 0x30, 
0x30, 0xd3, 0xe6, 0xa8, 0x62, 0x00, 0x00, 0x00, 
0x25, 0x74, 0x45, 0x58, 0x74, 0x64, 0x61, 0x74, 
0x65, 0x3a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 
0x00, 0x32, 0x30, 0x31, 0x31, 0x2d, 0x30, 0x33, 
0x2d, 0x30, 0x38, 0x54, 0x31, 0x32, 0x3a, 0x31, 
0x37, 0x3a, 0x30, 0x39, 0x2b, 0x30, 0x36, 0x3a, 
0x30, 0x30, 0xa2, 0xbb, 0x10, 0xde, 0x00, 0x00, 
0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 
0x60, 0x82, 
};

#include "wx/mstream.h"

static wxImage *triggerbad_png_img()
{
	if (!wxImage::FindHandler(wxT("PNG file")))
		wxImage::AddHandler(new wxPNGHandler());
	static wxImage *img_triggerbad_png = new wxImage();
	if (!img_triggerbad_png || !img_triggerbad_png->IsOk())
	{
		wxMemoryInputStream img_triggerbad_pngIS(triggerbad_png_data, sizeof(triggerbad_png_data));
		img_triggerbad_png->LoadFile(img_triggerbad_pngIS, wxBITMAP_TYPE_PNG);
	}
	return img_triggerbad_png;
}
#define triggerbad_png_img triggerbad_png_img()

static wxBitmap *triggerbad_png_bmp()
{
	static wxBitmap *bmp_triggerbad_png;
	if (!bmp_triggerbad_png || !bmp_triggerbad_png->IsOk())
		bmp_triggerbad_png = new wxBitmap(*triggerbad_png_img);
	return bmp_triggerbad_png;
}
#define triggerbad_png_bmp triggerbad_png_bmp()

static wxIcon *triggerbad_png_ico()
{
	static wxIcon *ico_triggerbad_png;
	if (!ico_triggerbad_png || !ico_triggerbad_png->IsOk())
	{
		ico_triggerbad_png = new wxIcon();
		ico_triggerbad_png->CopyFromBitmap(*triggerbad_png_bmp);
	}
	return ico_triggerbad_png;
}
#define triggerbad_png_ico triggerbad_png_ico()

#endif // TRIGGERBAD_PNG_H
