#ifndef RULE_PNG_H
#define RULE_PNG_H

static const unsigned char rule_png_data[] = {
0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 
0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 
0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 
0x08, 0x03, 0x00, 0x00, 0x00, 0x28, 0x2d, 0x0f, 
0x53, 0x00, 0x00, 0x00, 0x57, 0x50, 0x4c, 0x54, 
0x45, 0x00, 0x00, 0x00, 0xdd, 0xa9, 0x1d, 0xeb, 
0xcc, 0x7a, 0xff, 0xe5, 0x9c, 0xff, 0xe5, 0x99, 
0xff, 0xe4, 0x94, 0xff, 0xe3, 0x8d, 0xfe, 0xe2, 
0x86, 0xfe, 0xe1, 0x7f, 0xff, 0xe5, 0x9a, 0xff, 
0xe4, 0x95, 0xff, 0xe3, 0x8f, 0xfe, 0xe2, 0x87, 
0xfe, 0xe1, 0x81, 0xfe, 0xe0, 0x7b, 0xff, 0xe5, 
0x9b, 0xff, 0xe4, 0x97, 0xff, 0xe3, 0x90, 0xfe, 
0xe2, 0x89, 0xfe, 0xe1, 0x82, 0xfe, 0xe0, 0x7c, 
0xfe, 0xe0, 0x77, 0xff, 0xe5, 0x98, 0xff, 0xe4, 
0x92, 0xff, 0xe3, 0x8b, 0xfe, 0xe2, 0x84, 0xfe, 
0xe1, 0x7d, 0xfe, 0xe0, 0x78, 0xfe, 0xe0, 0x79, 
0xa4, 0x04, 0xf3, 0x66, 0x00, 0x00, 0x00, 0x01, 
0x74, 0x52, 0x4e, 0x53, 0x00, 0x40, 0xe6, 0xd8, 
0x66, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 
0x73, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 
0x48, 0x00, 0x46, 0xc9, 0x6b, 0x3e, 0x00, 0x00, 
0x00, 0x55, 0x49, 0x44, 0x41, 0x54, 0x18, 0xd3, 
0xad, 0x8e, 0x37, 0x16, 0x80, 0x30, 0x0c, 0x43, 
0x23, 0x48, 0x23, 0x8d, 0x6a, 0xfa, 0xfd, 0xcf, 
0x89, 0x93, 0x09, 0x1e, 0x6b, 0xbe, 0x26, 0x7f, 
0x0d, 0xb2, 0x10, 0x35, 0xc0, 0x9b, 0x86, 0xef, 
0x96, 0x23, 0xa1, 0xa0, 0x61, 0x60, 0x51, 0x44, 
0x07, 0x07, 0x8f, 0x80, 0x88, 0x94, 0x45, 0x2f, 
0x07, 0x8c, 0x7a, 0xc2, 0x6c, 0x17, 0x50, 0x16, 
0xab, 0xdb, 0xfc, 0x1e, 0x8e, 0x78, 0xa6, 0x8b, 
0x8a, 0x50, 0x5c, 0x1b, 0xae, 0x6f, 0xa2, 0x22, 
0x9a, 0xcf, 0x4a, 0x95, 0xbf, 0xff, 0x3c, 0x90, 
0x3c, 0x03, 0x01, 0x0c, 0x01, 0xee, 0x4f, 0x00, 
0x00, 0x00, 0x25, 0x74, 0x45, 0x58, 0x74, 0x64, 
0x61, 0x74, 0x65, 0x3a, 0x63, 0x72, 0x65, 0x61, 
0x74, 0x65, 0x00, 0x32, 0x30, 0x31, 0x30, 0x2d, 
0x31, 0x32, 0x2d, 0x30, 0x31, 0x54, 0x32, 0x30, 
0x3a, 0x34, 0x33, 0x3a, 0x34, 0x35, 0x2b, 0x30, 
0x35, 0x3a, 0x30, 0x30, 0x9e, 0xee, 0x2e, 0xaa, 
0x00, 0x00, 0x00, 0x25, 0x74, 0x45, 0x58, 0x74, 
0x64, 0x61, 0x74, 0x65, 0x3a, 0x6d, 0x6f, 0x64, 
0x69, 0x66, 0x79, 0x00, 0x32, 0x30, 0x31, 0x30, 
0x2d, 0x30, 0x39, 0x2d, 0x30, 0x31, 0x54, 0x32, 
0x33, 0x3a, 0x34, 0x34, 0x3a, 0x30, 0x36, 0x2b, 
0x30, 0x35, 0x3a, 0x30, 0x30, 0xca, 0x97, 0x55, 
0xac, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 
0x44, 0xae, 0x42, 0x60, 0x82, 
};

#include "wx/mstream.h"

static wxImage *rule_png_img()
{
	if (!wxImage::FindHandler(wxT("PNG file")))
		wxImage::AddHandler(new wxPNGHandler());
	static wxImage *img_rule_png = new wxImage();
	if (!img_rule_png || !img_rule_png->IsOk())
	{
		wxMemoryInputStream img_rule_pngIS(rule_png_data, sizeof(rule_png_data));
		img_rule_png->LoadFile(img_rule_pngIS, wxBITMAP_TYPE_PNG);
	}
	return img_rule_png;
}
#define rule_png_img rule_png_img()

static wxBitmap *rule_png_bmp()
{
	static wxBitmap *bmp_rule_png;
	if (!bmp_rule_png || !bmp_rule_png->IsOk())
		bmp_rule_png = new wxBitmap(*rule_png_img);
	return bmp_rule_png;
}
#define rule_png_bmp rule_png_bmp()

static wxIcon *rule_png_ico()
{
	static wxIcon *ico_rule_png;
	if (!ico_rule_png || !ico_rule_png->IsOk())
	{
		ico_rule_png = new wxIcon();
		ico_rule_png->CopyFromBitmap(*rule_png_bmp);
	}
	return ico_rule_png;
}
#define rule_png_ico rule_png_ico()

#endif // RULE_PNG_H
